.portfolio-section-photos {
    background-color: white;
   
}

    .portfolio-section-photos h2 {
            color: #242424;
            margin-bottom: 80px;
    }

    .grid-paysages img,
    .grid-portraits img {
        width: 100%;
        height: 100%;
        /* Même si vous ne connaissez pas cette propriété, vous en aurez besoin 
          pour permettre aux images de respecter les dimensions de la grid CSS */
        object-fit: cover;
        
}

.grid-paysages {
    display: grid;
    grid-template: repeat(3, 300px)/ repeat(3, 1fr);
    /*    grid-template: repeat(3, 571px)/ repeat(3, 1fr);
        préférence pour mon code pour l'affichage des photos
*/
    gap: 15px;
}

.grid-portraits {
    display: grid;
    grid-template: repeat(2, 300px)/ repeat(3, 1fr);

/*    grid-template: repeat(2, 571px)/ repeat(3, 1fr);
    préférence pour mon code pour l'affichage des photos
*/    
    grid-gap: 15px;
    
}

.photo {
    position: relative;
}

.hover-image {
    /*position du contenu*/
    position: absolute;
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;
    /*centrer le contenu*/
    display: flex;
    align-items: center;
    justify-content: center;
    /*style du contenu hover*/
    font-size:1.5em;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    display: none;
}

.photo:hover .hover-image {
    display:flex;
}


@media screen and (max-width: 996px) {
    .grid-paysages,
    .grid-portraits {
        display:flex;
        flex-direction:column;
    }

/*  le code qui suit est celui du corrigé mais je 
    préfère le mien par rapport à l'affichage des 
    photos qui est plus adapté au responsive  
    
    .grid-paysages {
        grid-template-columns: 1fr;
        gap: 15px;
    }

    .grid-portraits {
        grid-template-columns: 1fr;
        gap: 15px;
    }
    */

}